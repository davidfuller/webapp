class ScheduleComparison < ActiveRecord::Base
  
  belongs_to :channel
  
   named_scope :found_house,            :conditions => { :found_house => true },  :order => :start
   named_scope :found_title,            :conditions => { :found_house => false, :found_title => true}, :order => :start
   named_scope :found_contained_title,  :conditions => { :found_house => false, :found_title => true, :contained => true}, :order => :start
   named_scope :contained_title,        :conditions => { :found_house => false, :contained => true, :found_title => false}, :order => :start
   named_scope :not_found_house,        :conditions => { :found_house => false}, :order => :start
   named_scope :not_found,              :conditions => { :found_title => false, :found_house => false, :contained => false}, :order => :start

  FILTERS = [
    {:scope => "all",                   :label => "All"},
    {:scope => "found_house",           :label => "Already in database"},
    {:scope => "found_contained_title", :label => "Found title and contained in schedule"},
    {:scope => "found_title",           :label => "Found title in database"},
    {:scope => "contained_title",       :label => "Title contained in schedule"},
    {:scope => "not_found_house",       :label => "Any not in database"},
    {:scope => "not_found",             :label => "Not found"}    
  ]
  
  def self.filter_display
    filters = []
    FILTERS.each do |filter|
      filters << [[filter[:label]], filter[:scope]]
    end
    filters
  end
  
  def self.add_prog(schedule, press)
    comp = new
    comp.start = schedule.start
    comp.title = schedule.title
    comp.house_number = schedule.house_no
    comp.series_number = schedule.series_number
    comp.found_house = house_exists_and_local_title_not_nil(schedule.house_no, schedule.schedule_file.channel)
    comp.channel = schedule.schedule_file.channel
    comp.found_series = series_exists(schedule.series_number)
    if press.nil?
      comp.original_title = 'Not Found'
      comp.contained = false
      comp.found_title = false
    else
      comp.press_start = press.start
      comp.original_title = press.original_title
      comp.local_title = press.display_title
      comp.contained = same_title(comp.title, press.original_title)
      comp.found_title = title_exists(press.original_title)
    end
    comp.save
  end
  
  def self.update_conditions(id)
    comparison = find(id)
    if comparison
      comparison.found_house = house_exists_and_local_title_not_nil(comparison.house_number, comparison.channel)
      comparison.found_series = series_exists(comparison.series_number)
      if comparison.original_title != 'Not Found'
        comparison.contained = same_title(comparison.title, comparison.original_title)
        comparison.found_title = title_exists(comparison.original_title)
      end
      comparison.save
    end
  end
  
  def row_css
    if self.found_house
      "normal"
    elsif self.found_title && self.contained
      "titled_contained"
    elsif self.found_title
      "titled"
    elsif self.contained
      "contained"
    else
      "missing"
    end
  end
  
  def found?
    self.found_house || self.found_title || self.contained
  end
  
  def original_title_as_param
    if original_title.upcase == "NOT FOUND"
      ""
    else
      original_title
    end
  end
  
  private
  
  def self.same_title(schedule_title, press_title)
    contained = schedule_title.upcase.include? press_title.upcase
    if !contained
      test = press_title.upcase
      Ignore.all.each do |w|
        test = test.gsub(w.word.upcase,'').squeeze(" ").strip
        if schedule_title.upcase.include? test
          contained = true
        end
      end
    end
    contained
  end
  
  def self.house_exists(house_number)
    h = House.find_by_house_number(house_number)
    !h.nil?
  end
  
  def self.house_exists_and_local_title_not_nil(house_number, channel)
    h = House.find_by_house_number(house_number)
    if h
      case channel.language.name
      when 'Danish'
        t = h.title.danish
      when 'Swedish'
        t = h.title.swedish
      when 'Hungarian'
        t = h.title.hungarian
      when 'Norwegian'
        t = h.title.norwegian
      end      
      !t.nil? && !t.empty?
    else
      !h.nil?
    end
  end
        
  
  def self.series_exists(series_number)
    s = SeriesNumber.find_by_series_number(series_number)
    !s.nil?
  end
  
  def self.title_exists(title)
    t=Title.find_by_english(title)
    !t.nil?
  end
  
end
